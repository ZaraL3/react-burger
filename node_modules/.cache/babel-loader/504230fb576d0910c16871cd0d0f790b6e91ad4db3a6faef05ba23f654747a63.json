{"ast":null,"code":"/**\n * @remix-run/router v1.3.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  return path.replace(/^:(\\w+)(\\??)/g, (_, key, optional) => {\n    let param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, (_, key, optional) => {\n    let param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  let inFlightDataRoutes; // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location,\n    // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, router.basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  let submission;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate =\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (result instanceof DeferredData) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning$1","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","origin","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","warning","_","optional","param","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","createRouter","dataRoutes","inFlightDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","_window","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","resolvedLocation","protocol","isSameBasename","contentType","text","_result$init","_result$init2","deferred","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","UNSAFE_DeferredData","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getPathContributingMatches","UNSAFE_invariant"],"sources":["/Users/lenuraarabskaa/react/react-burger/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.3.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)(\\??)/g, (_, key, optional) => {\n    let param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, (_, key, optional) => {\n    let param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  let inFlightDataRoutes; // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, router.basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}